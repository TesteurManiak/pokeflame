import 'dart:math' as math;

import 'package:pokeflame_basekit/pokeflame_basekit.dart';
import 'package:pokeflame_core/pokeflame_core.dart';

class GrowthRateKit {
  final GameDataConstants constants;

  GrowthRateKit({required this.constants});

  /// Default implementation for the growth rate.
  static final base = GrowthRateKit(constants: ConstantsKit.base);

  /// Also known as "Medium Fast".
  late final medium = GameDataGrowthRate(
    id: 0,
    name: 'Medium',
    expValues: [
      -1,
      0,
      8,
      27,
      64,
      125,
      216,
      343,
      512,
      729,
      1000,
      1331,
      1728,
      2197,
      2744,
      3375,
      4096,
      4913,
      5832,
      6859,
      8000,
      9261,
      10648,
      12167,
      13824,
      15625,
      17576,
      19683,
      21952,
      24389,
      27000,
      29791,
      32768,
      35937,
      39304,
      42875,
      46656,
      50653,
      54872,
      59319,
      64000,
      68921,
      74088,
      79507,
      85184,
      91125,
      97336,
      103823,
      110592,
      117649,
      125000,
      132651,
      140608,
      148877,
      157464,
      166375,
      175616,
      185193,
      195112,
      205379,
      216000,
      226981,
      238328,
      250047,
      262144,
      274625,
      287496,
      300763,
      314432,
      328509,
      343000,
      357911,
      373248,
      389017,
      405224,
      421875,
      438976,
      456533,
      474552,
      493039,
      512000,
      531441,
      551368,
      571787,
      592704,
      614125,
      636056,
      658503,
      681472,
      704969,
      729000,
      753571,
      778688,
      804357,
      830584,
      857375,
      884736,
      912673,
      941192,
      970299,
      1000000
    ],
    expFormula: (level) => math.pow(level, 3).toInt(),
    constants: constants,
  );

  late final erratic = GameDataGrowthRate(
    id: 1,
    name: 'Erratic',
    expValues: [
      -1,
      0,
      15,
      52,
      122,
      237,
      406,
      637,
      942,
      1326,
      1800,
      2369,
      3041,
      3822,
      4719,
      5737,
      6881,
      8155,
      9564,
      11111,
      12800,
      14632,
      16610,
      18737,
      21012,
      23437,
      26012,
      28737,
      31610,
      34632,
      37800,
      41111,
      44564,
      48155,
      51881,
      55737,
      59719,
      63822,
      68041,
      72369,
      76800,
      81326,
      85942,
      90637,
      95406,
      100237,
      105122,
      110052,
      115015,
      120001,
      125000,
      131324,
      137795,
      144410,
      151165,
      158056,
      165079,
      172229,
      179503,
      186894,
      194400,
      202013,
      209728,
      217540,
      225443,
      233431,
      241496,
      249633,
      257834,
      267406,
      276458,
      286328,
      296358,
      305767,
      316074,
      326531,
      336255,
      346965,
      357812,
      367807,
      378880,
      390077,
      400293,
      411686,
      423190,
      433572,
      445239,
      457001,
      467489,
      479378,
      491346,
      501878,
      513934,
      526049,
      536557,
      548720,
      560922,
      571333,
      583539,
      591882,
      600000
    ],
    expFormula: (level) => math.pow(level, 4) * 3 ~/ 500,
    constants: constants,
  );

  late final fluctuating = GameDataGrowthRate(
    id: 2,
    name: 'Fluctuating',
    expValues: [
      -1,
      0,
      4,
      13,
      32,
      65,
      112,
      178,
      276,
      393,
      540,
      745,
      967,
      1230,
      1591,
      1957,
      2457,
      3046,
      3732,
      4526,
      5440,
      6482,
      7666,
      9003,
      10506,
      12187,
      14060,
      16140,
      18439,
      20974,
      23760,
      26811,
      30146,
      33780,
      37731,
      42017,
      46656,
      50653,
      55969,
      60505,
      66560,
      71677,
      78533,
      84277,
      91998,
      98415,
      107069,
      114205,
      123863,
      131766,
      142500,
      151222,
      163105,
      172697,
      185807,
      196322,
      210739,
      222231,
      238036,
      250562,
      267840,
      281456,
      300293,
      315059,
      335544,
      351520,
      373744,
      390991,
      415050,
      433631,
      459620,
      479600,
      507617,
      529063,
      559209,
      582187,
      614566,
      639146,
      673863,
      700115,
      737280,
      765275,
      804997,
      834809,
      877201,
      908905,
      954084,
      987754,
      1035837,
      1071552,
      1122660,
      1160499,
      1214753,
      1254796,
      1312322,
      1354652,
      1415577,
      1460276,
      1524731,
      1571884,
      1640000
    ],
    expFormula: (level) {
      final rate = math.max(82 - ((level - 100) / 2.0), 40);
      return math.pow(level, 4) * rate ~/ 5000;
    },
    constants: constants,
  );

  List<GameDataGrowthRate> get props => [medium, erratic, fluctuating];
}
